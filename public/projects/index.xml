<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Moro Bamber</title>
    <link>http://localhost:1313/projects/</link>
    <description>Recent content in Projects on Moro Bamber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Jan 2025 22:14:54 -0900</lastBuildDate><atom:link href="http://localhost:1313/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TSP in Go</title>
      <link>http://localhost:1313/projects/gotsp/</link>
      <pubDate>Sun, 05 Jan 2025 22:14:54 -0900</pubDate>
      
      <guid>http://localhost:1313/projects/gotsp/</guid>
      <description>My Introduction to the Go language Go has long intrigued me. When doing research on the Border Gateway Protocol I stumbled upon the creator of https://bgp.tools GitHub and he had several projects written in the language. Since this person was writing in Go, it must have some utility, I thought. Since then I had wanted to do something with the language but Inever had a good reason for it.
After I completed my undergrad, I tried doing codecademy courses on Go.</description>
      <content>&lt;h1 id=&#34;my-introduction-to-the-go-language&#34;&gt;My Introduction to the Go language&lt;/h1&gt;
&lt;p&gt;Go has long intrigued me. When doing research on the Border Gateway Protocol I stumbled upon the creator of &lt;a href=&#34;https://bgp.tools&#34;&gt;https://bgp.tools&lt;/a&gt; GitHub and he had several projects written in the language. Since this person was writing in Go, it must have some utility, I thought. Since then I had wanted to do something with the language but Inever had a good reason for it.&lt;/p&gt;
&lt;p&gt;After I completed my undergrad, I tried doing codecademy courses on Go. These are dreadfully boring, and since I already knew how to code, I felt like I could learn the syntax on the fly while building something I was interested in.&lt;/p&gt;
&lt;p&gt;I wanted to extend my research on the Traveling Salesman Problem (TSP) and thought that writing an implementation of some algorithms in Go could be fun.&lt;/p&gt;
&lt;h1 id=&#34;the-tsp-in-go----a-learning-experience&#34;&gt;The TSP in Go -  A Learning Experience&lt;/h1&gt;
&lt;p&gt;Right off the bat, I enjoyed writing the TSP implementation of the Genetic Algorithm. I followed my C++ code I wrote and made language specific modifications.  I also looked for ways to improve the code as well.&lt;/p&gt;
&lt;p&gt;I found writing Go code intuitive. I really like its syntax as well as its quirks. It is clearly a language designed with intentions to be useful and make one&amp;rsquo;s life easier. The auto complete program and syntax checker was forcing me to write efficient and non-redundant code. I was forced to cut any fat that existed in my C++ implementation.&lt;/p&gt;
&lt;p&gt;Once I finished the first complete set of GA operators, I noticed in my tests how fast the program was running. I am talking about magnitudes of 20x faster than my C++ code. While I did make some modifications for performance, the code is doing a similar amount of operations. I was and am still amazed at how fast Go code runs. I questioned C++ and its perfromance benefits, and I stumbled upon this video &lt;a href=&#34;https://www.youtube.com/watch?v=02rh1NjJLI4&amp;t=54s&#34;&gt;https://www.youtube.com/watch?v=02rh1NjJLI4&amp;t=54s&lt;/a&gt;. It talks about how carefully written python can be much faster than C++. The performance difference comes down to how poorly written C++ can be combiled into garbage assembly code. I thouhgt to myself, ok there is something in this C++ code that is slowing this down a ton. And since the Go implenetation is written similarily to the C++ code, Go must be removing this garbage assembly in place of something much better.  Thus proving that Go will allow someone of mediocre skill in the language to write something that runs half-decently. As I said before, I felt forced by the language to write better code.&lt;/p&gt;
&lt;p&gt;All things said, I had a great experience working with Go and will continue to use the language where I can in the future.&lt;/p&gt;
&lt;h2 id=&#34;genetic-algorithm-in-go-for-the-tsp&#34;&gt;Genetic Algorithm in Go for the TSP&lt;/h2&gt;
&lt;p&gt;As mentioned, I essetially converted my C++ code to Go code for the Genetic Algorithm implementation.  I won&amp;rsquo;t talk too much about that here because I have several documents supporting my research on the topic here &lt;a href=&#34;http://localhost:1313/projects/travelingsalesman/&#34;&gt;TSP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;christofides-algorithm&#34;&gt;Christofides Algorithm&lt;/h2&gt;
&lt;p&gt;I also tackled the Christofides algorithm in Go. See my paper on it in the Traveling Salesman Project post: &lt;a href=&#34;http://localhost:1313/projects/travelingsalesman/&#34;&gt;TSP&lt;/a&gt;.
This was also nice to write in the language as its map feature made things much easier than working with C++.&lt;/p&gt;
&lt;h3 id=&#34;check-out-the-code-here-httpsgithubcomunderyourspelltspgo&#34;&gt;Check out the code here: &lt;a href=&#34;https://github.com/UnderYourSpell/tspgo&#34;&gt;https://github.com/UnderYourSpell/tspgo&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;future-work&#34;&gt;Future Work&lt;/h2&gt;
&lt;p&gt;I intend to extend my research on the TSP further, likely using my Go implementation as opposed to my C++ implementation.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Senior Capstone - Car Crash Analysis</title>
      <link>http://localhost:1313/projects/senior_capstone/</link>
      <pubDate>Mon, 09 Dec 2024 22:14:54 -0900</pubDate>
      
      <guid>http://localhost:1313/projects/senior_capstone/</guid>
      <description>Alaska Car Crash Analysis For my Senior Capstone project at UAA I worked with two other undergraduate students to find meaningful insights into car crash data to inform Alaska Department of Transportation policy.
We also developed a web application to aid further research by allowing users who are unfamiliar with programming to explore and analyze the crash data.
My contributions to the project includes the pre-processing and addition of data categorizing crashes into urban, rural, and suburban areas, as well as being the lead developer for the web app.</description>
      <content>&lt;h1 id=&#34;alaska-car-crash-analysis&#34;&gt;Alaska Car Crash Analysis&lt;/h1&gt;
&lt;p&gt;For my Senior Capstone project at UAA I worked with two other undergraduate students to find meaningful insights into car crash
data to inform Alaska Department of Transportation policy.&lt;/p&gt;
&lt;p&gt;We also developed a web application to aid further research by allowing users who are unfamiliar with programming
to explore and analyze the crash data.&lt;/p&gt;
&lt;p&gt;My contributions to the project includes the pre-processing and addition of data categorizing crashes into urban, rural, and suburban areas, as well as being the lead developer for the web app. The web app was made with the Django framework, I also wrote most of the css and all the html for the pages except for the home page.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/projects/AKCrashAnalysisFinalReport.pdf&#34;&gt;AKCrashAnalysis Report&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;home&#34; src=&#34;http://localhost:1313/django_app/site.png&#34;&gt;
&lt;img alt=&#34;datasets&#34; src=&#34;http://localhost:1313/django_app/datasets.png&#34;&gt;
&lt;img alt=&#34;urbrural&#34; src=&#34;http://localhost:1313/django_app/for_pres_urban_rural.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Check out the site here &lt;a href=&#34;https://mwbamber.pythonanywhere.com/&#34;&gt;https://mwbamber.pythonanywhere.com/&lt;/a&gt;
Note: You need a username and password given by me to access the data due to its sensitive nature&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The Traveling Salesman Problem</title>
      <link>http://localhost:1313/projects/travelingsalesman/</link>
      <pubDate>Sun, 08 Dec 2024 22:14:54 -0900</pubDate>
      
      <guid>http://localhost:1313/projects/travelingsalesman/</guid>
      <description>Solving the Traveling Salesman Problem with the Genetic Algorithm in C++ For an undergrad AI class, I wrote a Genetic Algorithm (GA) to solve the Traveling Salesman Problem (TSP) in C++. I implemented several different operators for Selection, Crossover, and Mutation, 40 permuations of these operators can be used.
TravelingSalesmanGAReport.pdf
https://github.com/UnderYourSpell/TravelingSalesmanGA
Speed vs. Accuracy: Heuristic Travling Salesman Problem Approaches During my undergrad, I also co-authored a paper on different heuristic methods for solving the TSP.</description>
      <content>&lt;h1 id=&#34;solving-the-traveling-salesman-problem-with-the-genetic-algorithm-in-c&#34;&gt;Solving the Traveling Salesman Problem with the Genetic Algorithm in C++&lt;/h1&gt;
&lt;p&gt;For an undergrad AI class, I wrote a Genetic Algorithm (GA) to solve the Traveling Salesman Problem (TSP) in C++. I implemented several different operators for Selection, Crossover, and Mutation, 40 permuations of these operators can be used.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/projects/TravelingSalesmanGAReport.pdf&#34;&gt;TravelingSalesmanGAReport.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/UnderYourSpell/TravelingSalesmanGA&#34;&gt;https://github.com/UnderYourSpell/TravelingSalesmanGA&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/z6zc55DdEBw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;speed-vs-accuracy-heuristic-travling-salesman-problem-approaches&#34;&gt;Speed vs. Accuracy: Heuristic Travling Salesman Problem Approaches&lt;/h1&gt;
&lt;p&gt;During my undergrad, I also co-authored a paper on different heuristic methods for solving the TSP. We tested 3 algorithms for speed and optimal path length. The algorithms were Christofides, GA, and Ant Colony Optimization (ACO).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/projects/Bamber_Seto_Kageyama_PLC_Report.docx.pdf&#34;&gt;Bamber_Seto_Kageyama_PLC_Report.docx.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>BGP and Internet Access in the Circumpolar North</title>
      <link>http://localhost:1313/projects/bgppython/</link>
      <pubDate>Sat, 09 Dec 2023 22:14:54 -0900</pubDate>
      
      <guid>http://localhost:1313/projects/bgppython/</guid>
      <description>Understanding the Internet Backbone in the Circumpolar North I was the lead author on a paper addressing internet access in the circumpolar north that addressed BGP and ASes. Border Gateway Protocol (BGP) is the protocol that governs communcation between Networks (also called Autonomous Systems) or ASes. These networks are administered by Internet Service Providers or ISPs. I presented the paper at INFOCOM 2024 in Kingston, ON, Canada. I also presented a posterboard version of the paper at the Murdock Undergraduate Science Conference 2024 in Vancouver, WA.</description>
      <content>&lt;h1 id=&#34;understanding-the-internet-backbone-in-the-circumpolar-north&#34;&gt;Understanding the Internet Backbone in the Circumpolar North&lt;/h1&gt;
&lt;p&gt;I was the lead author on a paper addressing internet access in the circumpolar north that addressed BGP and ASes. Border Gateway Protocol (BGP) is the protocol that governs communcation between Networks (also called Autonomous Systems) or ASes. These networks are administered by Internet Service Providers or ISPs. I presented the paper at INFOCOM 2024 in Kingston, ON, Canada. I also presented a posterboard version of the paper at the Murdock Undergraduate Science Conference 2024 in Vancouver, WA.&lt;/p&gt;
&lt;p&gt;Read it here: &lt;a href=&#34;http://localhost:1313/projects/CCECE_24_DmDuo.pdf&#34;&gt;CCCE_24_DmDuo.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;bgp-python-as-lookup&#34;&gt;BGP Python AS Lookup&lt;/h1&gt;
&lt;p&gt;The development of BGP python AS lookup was inspired by a repository found on Cisco Developer (pyjoeypy06). I thought that the code was interesting and learned of the API it was using to pull the BGP data from the internet.  The API seemed underutilized so I set out to make more use of it.  The app works by appending the entered ASN to a link to the api, which then responds with JSON data.  It then parses through the JSON data for the specific information each section of information may need for the given AS.  The information is stored in object variables so the app can store more than one AS’s data.   It uses string concatenation to display the result in plaintext format.The project was built in Python and the UI was built using TKinter (a built in python graphics library).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;app1&#34; src=&#34;http://localhost:1313/bgp/moro_app_1.png&#34;&gt;
&lt;img alt=&#34;app2&#34; src=&#34;http://localhost:1313/bgp/moro_app_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/UnderYourSpell/BGP_python_AS_Lookup&#34;&gt;https://github.com/UnderYourSpell/BGP_python_AS_Lookup&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Mobile Virtual Graphing Caluclator</title>
      <link>http://localhost:1313/projects/mcvcalc/</link>
      <pubDate>Sat, 09 Dec 2023 22:14:54 -0900</pubDate>
      
      <guid>http://localhost:1313/projects/mcvcalc/</guid>
      <description>MVGCalc I was part of a team that for a Software Engineering class in my undergrad built a graphing calculator for mobile phones. It can do basic operations, as well as graphing, and also has a unit converter. The majority of my work on the project was how we take input, process it, then give the user an output. I also implemented a data persistence solution and the entire unit converter - frontend and backend.</description>
      <content>&lt;h1 id=&#34;mvgcalc&#34;&gt;MVGCalc&lt;/h1&gt;
&lt;p&gt;I was part of a team that for a Software Engineering class in my undergrad built a graphing calculator for mobile phones.  It can do basic operations, as well as graphing, and also has a unit converter. The majority of my work on the project was how we take input, process it, then give the user an output.  I also implemented a data persistence solution and the entire unit converter  - frontend and backend.&lt;/p&gt;
&lt;p&gt;It was written in Python and uses PyQt for the GUI. We used NumPy for the math operations.&lt;/p&gt;
&lt;p&gt;Download .exe from google drive &lt;a href=&#34;https://drive.google.com/drive/folders/1FL7p2IKNtsRZe7CULhQaINIeTw1hT7kr?usp=drive_link&#34;&gt;https://drive.google.com/drive/folders/1FL7p2IKNtsRZe7CULhQaINIeTw1hT7kr?usp=drive_link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;calc1&#34; src=&#34;http://localhost:1313/mvgcalc/mvg_basic_2.png&#34;&gt;
&lt;img alt=&#34;calc2&#34; src=&#34;http://localhost:1313/mvgcalc/mvg_graph_display.png&#34;&gt;
&lt;img alt=&#34;calc3&#34; src=&#34;http://localhost:1313/mvgcalc/mvg_unit_conv.png&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
